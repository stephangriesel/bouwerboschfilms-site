---
// src/layouts/MainLayout.astro
import ImageMarquee from '../components/ImageMarquee.astro';
import '../styles/global.css';

export interface Props {
    title?: string;
}

const { title = 'My Parallax Site' } = Astro.props;
---
<html lang="en">
    <head>
        <meta charset="utf-t" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
    </head>
    <body>
        <div class="main-container">
            <main class="left-content">
                
                <nav class="navigation">
                    <a href="/">Home</a>
                    <a href="#about">About</a>
                    <a href="#services">Services</a>
                    <a href="#contact">Contact</a>
                </nav>

                <ImageMarquee />

                <slot /> </main>

            <aside class="right-sidebar">
            </aside>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                
                const scrollContainer = document.querySelector('.left-content');
                const parallaxSections = document.querySelectorAll<HTMLElement>('.parallax-section');
                const maxSkew = 7;

                // --- THE FIX ---
                // 1. Define the function to *accept* the container as an argument.
                // We type it as 'HTMLElement' so TypeScript knows it has .clientHeight, etc.
                function updateSkewOnScroll(container: HTMLElement) {
                    // Now 'container' is guaranteed to be an HTMLElement here.
                    const containerHeight = container.clientHeight;
                    const containerCenterY = containerHeight / 2;
                    const containerRect = container.getBoundingClientRect();

                    for (const section of parallaxSections) {
                        const rect = section.getBoundingClientRect();
                        const elementTopInContainer = rect.top - containerRect.top;
                        const elementCenterInContainer = elementTopInContainer + rect.height / 2;
                        const distanceFromCenter = elementCenterInContainer - containerCenterY;
                        const percentage = distanceFromCenter / containerCenterY;
                        const clampedPercentage = Math.max(-1.5, Math.min(1.5, percentage));
                        const skewValue = clampedPercentage * maxSkew;

                        section.style.transform = `skewY(${skewValue}deg)`;
                    }
                }

                // 2. Check if scrollContainer exists.
                if (scrollContainer) {
                    // 3. Cast it to HTMLElement and pass it to the function.
                    const containerElement = scrollContainer as HTMLElement;

                    // Run once on load
                    updateSkewOnScroll(containerElement);

                    // Add the event listener
                    let ticking = false;
                    containerElement.addEventListener('scroll', () => {
                        if (!ticking) {
                            window.requestAnimationFrame(() => {
                                updateSkewOnScroll(containerElement); // Pass it here too
                                ticking = false;
                            });
                            ticking = true;
                        }
                    });

                } else {
                    console.error("Scroll container '.left-content' not found.");
                }
            });
        </script>
    </body>
</html>